#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>   // This is required when using &mkp mouse key events.
#include <dt-bindings/zmk/bt.h>      // This is required when using &bt bluetooth commands.
#include <dt-bindings/zmk/outputs.h> // This is required when using the &out output commands.

// The dedicated shift key has got the following behaviour:
// - if held down, it is the shift modifier
// - if held down, but no other key is tapped, it reverts to the default layer (note that this requires the custom retro-tap patch of https://github.com/nickconway/zmk/tree/retro-tap-binding)
// - if tapped once, it is a one-shot shift, i.e. applies shift only to the next key
// - if tapped twice, it is my flavour of caps word, i.e. it capitalizes the subsequent word (including the underscore)
//
// This is implemented as follows:
// - first, there is a hold-tap with hold the LSHFT and tap the following sticky key with the custom retro-tap patch mapping an aborted hold to the layer reset
// - the sticky key produces a one-shot version of a macro that applies the following two modifiers
// - the shift modifier (for the one-shot shift) and the momentarily applied special layer L_SHF (which does nothing other than modifying the behaviour of the shift key)
// - on the special layer L_SHF the shift key is my flavour of caps-word - otherwise that layer is transparent

/ {
  macros {
    mls: macro_layer_and_shift { // this macro applies the two modifiers when the shift key is tapped once
      compatible = "zmk,behavior-macro";
      label = "MACRO_LAYER_AND_SHIFT";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <1>;
      bindings
      = <&macro_press &mo L_SHF &kp LSHFT>
      , <&macro_pause_for_release>
      , <&macro_release &mo L_SHF &kp LSHFT>
      ;
    };
  };

  behaviors {
    sls: sticky_layer_and_shift { // this is the sticky behaviour of the macro when the dedicated shift key is pressed once
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_LAYER_AND_SHIFT";
      #binding-cells = <1>;
      release-after-ms = <1000>;
      bindings = <&mls>;
      ignore-modifiers;
    };
    sht: shift_hold_tap { // this is the hold-tap for the dedicated shift key
      compatible = "zmk,behavior-hold-tap";
      label = "SHIFT_HOLD_TAP";
      #binding-cells = <2>;
      flavor = "balanced";
      retro-tap;
      retro-tap-behavior = "TO_LAYER"; // this requiree the custom retro-tap patch; note that the alternative behaviour is defined using control strings such as this
      retro-tap-param1 = <L_DEF>;
      tapping-term-ms = <200>;
      bindings = <&kp>, <&sls>;
    };
    mycaps: behavior_my_caps_word { // my version of Caps Word includes the underscore as a letter.
      compatible = "zmk,behavior-caps-word";
      label = "MY_CAPS";
      #binding-cells = <0>;
      continue-list = <UNDER>;
    };
    szet: szet_excl { // the [ÃŸ] key with [Shift] is the exclamation mark.
      compatible = "zmk,behavior-mod-morph";
      label = "SZET_EXCL";
      #binding-cells = <0>;
      bindings = <&kp RA(S)>, <&kp N1>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    shnu: shift_numbers { // the [L-1] number layer key with [Shift] switches to the secret layer.
      compatible = "zmk,behavior-mod-morph";
      label = "SHIFT_NUMBERS";
      #binding-cells = <0>;
      bindings = <&lht L_NUM L_NUM>, <&mo L_BLE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    lht: layer_hold_tap { // the layer switch keys on the left half are &to if tapped and &mo if held down.
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_HOLD_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      bindings = <&mo>, <&to>;
    };
    ltt: layer_to_tap { // the layer switch key on the right half is &to if tapped and &to if held down.
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TO_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      bindings = <&to>, <&to>;
    };
    moht: modifier_hold_tap { // the home row modifiers use the following specialization of &ht.
      compatible = "zmk,behavior-hold-tap";
      label = "MODIFIER_HOLD_TAP";
      #binding-cells = <2>;
      flavor = "balanced";
      retro-tap;
      tapping-term-ms = <200>;
      bindings = <&kp>, <&kp>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {

// +-------+-------+-------+-------+-------+-------+                       +-------+-------+-------+-------+-------+-------+
// |       |       |       |       |       |       |                       |       |       |       |       |       |       |
// +-------+-------+-------+-------+-------+-------+                       +-------+-------+-------+-------+-------+-------+
// |       |       |       |       |       |       |                       |       |       |       |       |       |       |
// +-------+-------+-------+-------+-------+-------+                       +-------+-------+-------+-------+-------+-------+
// |       |       |       |       |       |       |                       |       |       |       |       |       |       |
// +-------+-------+-------+-------+-------+-------+-------+       +-------+-------+-------+-------+-------+-------+-------+
//                 |       |       |       |       |       |       |       |       |       |       |       |
//                 +-------+-------+-------+-------+-------+       +-------+-------+-------+-------+-------+

      bindings = <
    &kp GRAVE &kp X     &kp V        &kp   L          &kp C             &kp W                                       &kp K   &kp H         &kp G        &kp F        &kp Q   &szet
    &kp APOS  &kp U     &moht LWIN I &moht LALT A     &moht LCTRL E     &kp O                                       &kp S   &moht LCTRL N &moht LALT R &moht LWIN T &kp D   &kp Y
    &kp SEMI  &kp RA(Y) &kp RA(P)    &kp   RA(Q)      &kp P             &kp Z                                       &kp B   &kp M         &kp COMMA    &kp PERIOD   &kp J   &kp SLASH
                        &kp ESC      &lht L_NAV L_NAV &sht LSHFT X      &shnu        &lht L_FUN L_FUN       &kp TAB &kp RET &kp SPACE     &kp BSPC     &ltt L_DEF L_NUM
        >;
    };

    numbers_layer {
      bindings = <
    &kp RA(N9)       &kp RA(LS(S)) &kp RA(N5)      &kp LBRC        &kp RBRC         &kp PIPE                     &kp SLASH &kp N7         &kp N8        &kp N9        &kp MINUS  &kp CARET
    &kp UNDER        &kp LBKT      &moht LWIN RBKT &moht LALT LPAR &moht LCTRL RPAR &kp BSLH                     &kp ASTRK &moht LCTRL N4 &moht LALT N5 &moht LWIN N6 &kp PLUS   &kp APOS
    &kp RA(LS(SEMI)) &kp AT        &kp HASH        &kp DLLR        &kp PRCNT        &kp AMPS                     &kp EQUAL &kp N1         &kp N2        &kp N3        &kp PERIOD &kp COMMA
                                   &trans          &trans          &trans           &trans   &trans &trans       &trans    &kp N0         &trans        &ltt L_DEF L_NAV
      >;
    };

    navigation_layer {
      bindings = <
    &trans &trans &trans &trans &trans &trans                          &mkp LCLK &kp HOME  &kp UP   &kp PG_UP &kp LA(LS(COMMA))  &kp LC(R)
    &trans &trans &trans &trans &trans &trans                          &mkp MCLK &kp LEFT  &kp SLCK &kp RIGHT &kp LC(L)          &kp LA(LS(N5))
    &trans &trans &trans &trans &trans &trans                          &mkp RCLK &kp END   &kp DOWN &kp PG_DN &kp LA(LS(PERIOD)) &kp LC(S)
                  &trans &trans &trans &trans  &trans          &trans  &trans    &kp SPACE &trans   &ltt L_DEF L_FUN
      >;
    };

    functions_layer {
      bindings = <
    &trans &trans &trans &trans &trans &trans                          &kp K_VOL_UP &kp F7  &kp F8  &kp F9  &kp F10 &kp C_BRI_UP
    &trans &trans &trans &trans &trans &trans                          &kp K_MUTE   &kp F4  &kp F5  &kp F6  &kp F11 &kp C_BRI_AUTO
    &trans &trans &trans &trans &trans &trans                          &kp K_VOL_DN &kp F1  &kp F2  &kp F3  &kp F12 &kp C_BRI_DN
                  &trans &trans &trans &trans  &trans          &trans  &trans       &trans  &trans  &ltt L_DEF L_DEF
      >;
    };

    secret_layer {
      bindings = <
    &trans &trans &trans &trans &trans &trans                          &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 &out OUT_BLE
    &trans &trans &trans &trans &trans &trans                          &trans       &bt BT_PRV   &bt BT_CLR   &bt BT_NXT   &trans       &out OUT_USB
    &trans &trans &trans &trans &trans &trans                          &trans       &trans       &trans       &trans       &trans       &out OUT_TOG
                  &trans &trans &trans &trans  &trans          &trans  &trans       &trans       &trans       &trans
      >;
    };

    shift_layer {
      bindings = <
    &trans &trans &trans &trans &trans &trans                          &trans       &trans       &trans       &trans       &trans       &trans
    &trans &trans &trans &trans &trans &trans                          &trans       &trans       &trans       &trans       &trans       &trans
    &trans &trans &trans &trans &trans &trans                          &trans       &trans       &trans       &trans       &trans       &trans
                  &trans &trans &mycaps &trans  &trans          &trans  &trans       &trans       &trans       &trans
      >;
    };
  };
};
